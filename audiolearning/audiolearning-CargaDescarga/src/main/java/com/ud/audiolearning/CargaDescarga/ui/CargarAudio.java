package com.ud.audiolearning.CargaDescarga.ui;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.function.Consumer;

import javax.imageio.ImageIO;

import org.bson.types.Binary;
import org.imgscalr.Scalr;
import org.imgscalr.Scalr.Mode;
import org.springframework.beans.factory.annotation.Autowired;
import org.vaadin.teemu.VaadinIcons;

import com.mongodb.gridfs.GridFSFile;
import com.ud.audiolearning.CargaDescarga.service.CargaDescargaService;
import com.ud.audiolearning.api.anotaciones.UIComponent;
import com.ud.audiolearning.api.domain.Audio;
import com.ud.audiolearning.api.domain.Categoria;
import com.ud.audiolearning.api.domain.Etiqueta;
import com.ud.audiolearning.api.domain.Imagen;
import com.ud.audiolearning.api.domain.ListaDifusion;
import com.ud.audiolearning.api.domain.Parametrico;
import com.ud.audiolearning.api.interfaces.AudioLearnUI;
import com.ud.audiolearning.api.service.ApiService;
import com.ud.audiolearning.api.ui.AppSession;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.data.fieldgroup.PropertyId;
import com.vaadin.data.util.BeanContainer;
import com.vaadin.data.util.BeanItem;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.ErrorHandler;
import com.vaadin.server.StreamResource;
import com.vaadin.server.StreamResource.StreamSource;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.ProgressBar;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.Upload;
import com.vaadin.ui.Upload.ProgressListener;
import com.vaadin.ui.Upload.Receiver;
import com.vaadin.ui.Upload.StartedEvent;
import com.vaadin.ui.Upload.StartedListener;
import com.vaadin.ui.Upload.SucceededEvent;
import com.vaadin.ui.Upload.SucceededListener;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.ValoTheme;

import ru.xpoft.vaadin.VaadinView;

@SuppressWarnings("serial")
@VaadinView("CargarAudio")
@UIComponent
public class CargarAudio extends CustomComponent implements View {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Button b_guardar;
	@AutoGenerated
	private VerticalLayout verticalLayout_2;
	@AutoGenerated
	private Panel p_cc;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;
	@AutoGenerated
	private GridLayout gridLayout_1;
	@AutoGenerated
	private CheckBox chk_sinDerivadas;
	@AutoGenerated
	private CheckBox chk_compartirIgual;
	@AutoGenerated
	private CheckBox chk_noComercial;
	@AutoGenerated
	private CheckBox chk_Attribution;
	@AutoGenerated
	private OptionGroup og_licencia;
	@AutoGenerated
	private Label l_licencias;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_2;
	@AutoGenerated
	private GridLayout gridLayout_2;
	@AutoGenerated
	private Button b_addCategoria;
	@AutoGenerated
	private TextField tf_categorias;
	@AutoGenerated
	private Label label_6;
	@AutoGenerated
	private Label label_8;
	@AutoGenerated
	private Button b_addListas;
	@AutoGenerated
	private TextField tf_listasDifusion;
	@AutoGenerated
	private Label label_7;
	@PropertyId("idioma")
	@AutoGenerated
	private ComboBox cb_idioma;
	@AutoGenerated
	private Label label_4;
	@PropertyId("genero")
	@AutoGenerated
	private ComboBox cb_genero;
	@AutoGenerated
	private Label label_5;
	@PropertyId("estado")
	@AutoGenerated
	private ComboBox cb_estado;
	@AutoGenerated
	private Label label_3;
	@PropertyId("fechaCreacion")
	@AutoGenerated
	private PopupDateField df_fechaCreacion;
	@AutoGenerated
	private Label label_11;
	@PropertyId("descripcion")
	@AutoGenerated
	private TextArea ta_descripcion;
	@AutoGenerated
	private Label label_2;
	@PropertyId("titulo")
	@AutoGenerated
	private TextField tf_tituloAudio;
	@AutoGenerated
	private Label label_1;
	@AutoGenerated
	private VerticalLayout vl_imagen;
	@AutoGenerated
	private Upload upload_imagen;
	@AutoGenerated
	private Embedded embedded_1;
	@AutoGenerated
	private Label l_tituloDatosAudio;
	@AutoGenerated
	private VerticalLayout vl_upload;
	@AutoGenerated
	private Label l_audio;
	@AutoGenerated
	private Upload upload_1;
	@AutoGenerated
	private Label l_tituloMp3;
	@AutoGenerated
	private HorizontalLayout hl_cabecera;
	@AutoGenerated
	private Label l_titulo;
	private Audio nuevoAudio;
	private FieldGroup binder;

	private ProgressBar progress;
	// protected File xfile;

	final ByteArrayOutputStream baos = new ByteArrayOutputStream();
	ByteArrayOutputStream baosImagen;

	@Autowired
	CargaDescargaService cargaDescargaService;

	@Autowired
	ApiService apiService;

	public CargarAudio() {

	}

	@Override
	public void enter(ViewChangeEvent event) {
		AudioLearnUI audioLearning = (AudioLearnUI) UI.getCurrent();
		audioLearning.getPrivateUI().getAreaContenido().setHeight("-1px");
		buildMainLayout();
		setCompositionRoot(mainLayout);
		init();
		inicializarCampos();
	
		style();

	}

	private void init() {
		upload_1.setImmediate(true);
		upload_imagen.setImmediate(true);
		progress = new ProgressBar();
		progress.setWidth("100%");
		vl_upload.addComponent(progress);
		nuevoAudio = new Audio();
		l_audio.setVisible(false);

		ArrayList<ListaDifusion> listasDifusion = new ArrayList<ListaDifusion>();
		ArrayList<Etiqueta> etiquetas = new ArrayList<Etiqueta>();
		ArrayList<Categoria> categorias = new ArrayList<Categoria>();
		Imagen imagen = new Imagen();
		nuevoAudio.setFechaCreacion(new Date());
		nuevoAudio.setUsuario(AppSession.getUser());
		nuevoAudio.setCategorias(categorias);
		nuevoAudio.setEtiquetas(etiquetas);
		nuevoAudio.setListasDifusion(listasDifusion);
		nuevoAudio.setFechaCreacion(new Date());
		nuevoAudio.setImagen(imagen);

		BeanItem<Audio> BeanItem = new BeanItem<Audio>(nuevoAudio);
		binder = new FieldGroup(BeanItem);
		binder.bindMemberFields(this);

		inicializarUploadComponent();
		iniciarUploadImagen();

		b_addListas.addClickListener(e -> addListas(e));
		b_addCategoria.addClickListener(e -> addCategorias(e));
		b_guardar.addClickListener(e -> crearAudio(e));
		b_guardar.setEnabled(false);

	}

	private void inicializarUploadComponent() {

		upload_1.addSucceededListener(new SucceededListener() {
			@Override
			public void uploadSucceeded(SucceededEvent event) {
				b_guardar.setEnabled(true);
				upload_1.setVisible(false);
				l_audio.setValue(event.getFilename());
				l_audio.setVisible(true);

			}
		});

		upload_1.setReceiver(new Receiver() {

			@Override
			public OutputStream receiveUpload(String filename, String mimeType) {
				nuevoAudio.setFileName(filename);
				nuevoAudio.setFileMimeType(mimeType);
				return baos;
			}

		});

		upload_1.setErrorHandler(new ErrorHandler() {

			@Override
			public void error(com.vaadin.server.ErrorEvent event) {
				System.err.println("Error al subir un archivo de audio" + event);
				upload_1.interruptUpload();
			}
		});
		upload_1.addStartedListener(new StartedListener() {

			@Override
			public void uploadStarted(StartedEvent event) {

				if (!event.getMIMEType().equals("audio/mp3")) {
					Notification.show("Error", "El archivo debe ser .mp3", Type.ERROR_MESSAGE);
					event.getUpload().interruptUpload();
				}
				progress.setValue(0f);
				UI.getCurrent().setPollInterval(500);

			}
		});

		upload_1.addProgressListener(new ProgressListener() {

			@Override
			public void updateProgress(long readBytes, long contentLength) {
				progress.setValue(new Float(readBytes / (float) contentLength));
			}
		});

	}

	private void iniciarUploadImagen() {

		upload_imagen.addSucceededListener(new SucceededListener() {
			@Override
			public void uploadSucceeded(SucceededEvent event) {

				InputStream is = new ByteArrayInputStream(baosImagen.toByteArray());
				try {
					BufferedImage image = ImageIO.read(is);
					BufferedImage resizedImage = Scalr.resize(image, Mode.FIT_TO_WIDTH, 200, 200);
					ByteArrayOutputStream out = new ByteArrayOutputStream();
					ImageIO.write(resizedImage, "jpg", out);
					nuevoAudio.getImagen().setBinaryData((new Binary(out.toByteArray())));
					embedded_1.setSource(null);
				} catch (IOException e) {
					Notification.show("Error!", "Se produjo un error al intentar subir la imagen!", Type.ERROR_MESSAGE);
					e.printStackTrace();
				}

				

				embedded_1.setSource(new StreamResource(new StreamSource() {

					@Override
					public InputStream getStream() {

						return new ByteArrayInputStream(nuevoAudio.getImagen().getBinaryData().getData());
					}
				}, nuevoAudio.getImagen().getNombre()));

			}
		});

		upload_imagen.setReceiver(new Receiver() {
			@Override
			public OutputStream receiveUpload(String filename, String mimeType) {
				nuevoAudio.getImagen().setNombre(filename);
				nuevoAudio.getImagen().setMimeType(mimeType);
				baosImagen = new ByteArrayOutputStream();
				return baosImagen;
			}
		});

		upload_imagen.addStartedListener(new StartedListener() {

			@Override
			public void uploadStarted(StartedEvent event) {


				if(!event.getMIMEType().contains("image")){
					 Notification.show("Error al cargar la imagen!", "Solamente se admiten archivos de imagen.", Type.ERROR_MESSAGE);
					 event.getUpload().interruptUpload();
					 }

			}
		});

		upload_imagen.setErrorHandler(new ErrorHandler() {

			@Override
			public void error(com.vaadin.server.ErrorEvent event) {
				System.err.println("Error al subir un archivo de Imagen" + event);
				upload_imagen.interruptUpload();
			}
		});
	}

	private void addCategorias(ClickEvent e) {
		Window w = new Window("Seleccionar Categorias");
		w.setWidth("-1px");
		w.setHeight("-1px");
		w.center();
		w.setModal(true);
		w.setContent(new ViewSelectCategorias(nuevoAudio.getCategorias(), apiService, categoriasConsumer));
		UI.getCurrent().addWindow(w);

	}

	private void addListas(ClickEvent e) {

		Window w = new Window("Seleccionar Listas de Difusión");
		w.setWidth("-1px");
		w.setHeight("-1px");
		w.center();
		w.setModal(true);
		w.setContent(new ViewSelectListas(nuevoAudio.getListasDifusion(), apiService, listasDifusionConsumer));
		UI.getCurrent().addWindow(w);
	}

	
	private void validarformulario() {

		String requerido = "Campo Requerido";

		tf_tituloAudio.setRequired(true);
		tf_tituloAudio.setRequiredError(requerido);

		cb_estado.setRequired(true);
		cb_estado.setRequiredError(requerido);

		cb_idioma.setRequired(true);
		cb_idioma.setRequiredError(requerido);

		cb_genero.setRequired(true);
		cb_genero.setRequiredError(requerido);

	}
	private void crearAudio(ClickEvent e) {
	
		try {
			validarformulario();
			binder.commit();
			GridFSFile archivo = cargaDescargaService.salvarAudioFile2(baos, nuevoAudio);
			if (archivo != null) {

				nuevoAudio.setFile(String.valueOf(archivo.getId()));
				cargaDescargaService.guardarAudio(nuevoAudio);
			
				nuevoAudio.setId(null);
				binder.clear();

				AudioLearnUI audiolearning = (AudioLearnUI) UI.getCurrent();
				audiolearning.getNavigator().navigateTo("misAudios");

				Notification n = new Notification("Correcto!",
						"Se ha creado con exito el Audio " + nuevoAudio.getTitulo(), Type.HUMANIZED_MESSAGE);
				n.setDelayMsec(3600);
				n.show(UI.getCurrent().getPage());
			} else {
				Notification.show("Fallo!", "Se produjo un error al subir el audio", Type.ERROR_MESSAGE);
			}
		} catch (Exception e2) {
			Notification.show("Aviso!", "Verificque los campos del formulario", Type.WARNING_MESSAGE);
		}

	}

	public Consumer<List<Categoria>> categoriasConsumer = (l) -> categoriasConsumer(l);
	public Consumer<List<ListaDifusion>> listasDifusionConsumer = (l) -> listasConsumer(l);

	public void categoriasConsumer(List<Categoria> l) {
		nuevoAudio.getCategorias().clear();
		StringBuilder categorias = new StringBuilder();
		nuevoAudio.getCategorias().addAll(l);
		for (Categoria c : l) {
			categorias.append(c.getNombre() + ", ");
		}
		tf_categorias.setValue(categorias.toString());
	}

	private void listasConsumer(List<ListaDifusion> l) {
		nuevoAudio.getListasDifusion().clear();
		StringBuilder listasLabel = new StringBuilder();
		nuevoAudio.getListasDifusion().addAll(l);
		for (ListaDifusion listaD : l) {
			listasLabel.append(listaD.getTitulo() + ", ");
		}
		tf_listasDifusion.setValue(listasLabel.toString());
	}

	private void inicializarCampos() {

		tf_categorias.setEnabled(false);
		tf_listasDifusion.setEnabled(false);
		upload_imagen.setButtonCaption("Subir Imagen");

		df_fechaCreacion.setEnabled(false);
		p_cc.setVisible(false);
		og_licencia.addItem("TDR");
		og_licencia.addItem("CC");
		og_licencia.setItemCaption("TDR", "Todos los Derechos Reservados");
		og_licencia.setItemCaption("CC", "Creative Commons");
		og_licencia.addValueChangeListener(e -> seleccionarLicencia(e));

		cb_estado.addItem("A");
		cb_estado.addItem("I");
		cb_estado.setItemCaption("A", "Activo");
		cb_estado.setItemCaption("I", "Inactivo");
		cb_estado.setRequired(true);

		tf_tituloAudio.setNullRepresentation("");
		tf_tituloAudio.setRequired(true);
		ta_descripcion.setNullRepresentation("");

		BeanContainer<String, Parametrico> BIIdioma = new BeanContainer<>(Parametrico.class);
		BIIdioma.setBeanIdProperty("codigo");
		BIIdioma.addAll(apiService.selectItemsIdiomas());
		cb_idioma.setContainerDataSource(BIIdioma);
		cb_idioma.setItemCaptionPropertyId("nombre");
		cb_idioma.setRequired(true);

		BeanContainer<String, Parametrico> BIGenero = new BeanContainer<>(Parametrico.class);
		BIGenero.setBeanIdProperty("codigo");
		BIGenero.addAll(apiService.selectItemsGeneros());
		cb_genero.setContainerDataSource(BIGenero);
		cb_genero.setItemCaptionPropertyId("nombre");
		cb_genero.setRequired(true);

	}

	private void seleccionarLicencia(ValueChangeEvent e) {

		p_cc.setVisible(false);
		if (e.getProperty().getValue().toString().equals("CC")) {

			p_cc.setVisible(true);
		}
	}

	

	private void style() {
		l_audio.addStyleName(ValoTheme.LABEL_COLORED);
		l_audio.addStyleName(ValoTheme.LABEL_H2);
		upload_1.setButtonCaption("Subir Audio");
		upload_1.addStyleName("uploadAudio");
		l_tituloDatosAudio.addStyleName(ValoTheme.LABEL_COLORED);
		l_tituloDatosAudio.addStyleName(ValoTheme.LABEL_H3);
		l_tituloDatosAudio.addStyleName(ValoTheme.LABEL_BOLD);
		l_tituloMp3.addStyleName(ValoTheme.LABEL_COLORED);
		l_tituloMp3.addStyleName(ValoTheme.LABEL_H3);
		l_tituloMp3.addStyleName(ValoTheme.LABEL_BOLD);
		l_licencias.addStyleName(ValoTheme.LABEL_COLORED);
		l_licencias.addStyleName(ValoTheme.LABEL_H3);
		l_licencias.addStyleName(ValoTheme.LABEL_BOLD);
		l_titulo.addStyleName(ValoTheme.LABEL_COLORED);
		l_titulo.addStyleName(ValoTheme.LABEL_H2);
		l_titulo.addStyleName(ValoTheme.LABEL_BOLD);
		og_licencia.addStyleName(ValoTheme.OPTIONGROUP_HORIZONTAL);

		b_addListas.setIcon(VaadinIcons.PLUS_CIRCLE);
		b_addListas.addStyleName(ValoTheme.BUTTON_ICON_ONLY);
		b_addListas.addStyleName(ValoTheme.BUTTON_BORDERLESS_COLORED);

		b_addCategoria.setIcon(VaadinIcons.PLUS_CIRCLE);
		b_addCategoria.addStyleName(ValoTheme.BUTTON_ICON_ONLY);
		b_addCategoria.addStyleName(ValoTheme.BUTTON_BORDERLESS_COLORED);
		tf_listasDifusion.addStyleName("textFieldColor");
		tf_categorias.addStyleName("textFieldColor");
		b_guardar.addStyleName(ValoTheme.BUTTON_FRIENDLY);
		b_guardar.setIcon(VaadinIcons.CLOUD_UPLOAD_O);
		vl_imagen.addStyleName("uploadImagen");

	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setStyleName("contenido");
		mainLayout.setCaption("Licencia");
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// hl_cabecera
		hl_cabecera = buildHl_cabecera();
		mainLayout.addComponent(hl_cabecera);
		mainLayout.setComponentAlignment(hl_cabecera, new Alignment(20));
		
		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		mainLayout.addComponent(verticalLayout_2);
		mainLayout.setComponentAlignment(verticalLayout_2, new Alignment(20));
		
		// b_guardar
		b_guardar = new Button();
		b_guardar.setCaption("Subir Audio");
		b_guardar.setImmediate(true);
		b_guardar.setWidth("-1px");
		b_guardar.setHeight("-1px");
		mainLayout.addComponent(b_guardar);
		mainLayout.setComponentAlignment(b_guardar, new Alignment(48));
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHl_cabecera() {
		// common part: create layout
		hl_cabecera = new HorizontalLayout();
		hl_cabecera.setStyleName("cabeceraContenido");
		hl_cabecera.setImmediate(false);
		hl_cabecera.setWidth("100.0%");
		hl_cabecera.setHeight("-1px");
		hl_cabecera.setMargin(false);
		
		// l_titulo
		l_titulo = new Label();
		l_titulo.setImmediate(false);
		l_titulo.setWidth("-1px");
		l_titulo.setHeight("-1px");
		l_titulo.setValue("Subir Audio");
		hl_cabecera.addComponent(l_titulo);
		
		return hl_cabecera;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("-1px");
		verticalLayout_2.setHeight("-1px");
		verticalLayout_2.setMargin(false);
		verticalLayout_2.setSpacing(true);
		
		// l_tituloMp3
		l_tituloMp3 = new Label();
		l_tituloMp3.setImmediate(false);
		l_tituloMp3.setWidth("-1px");
		l_tituloMp3.setHeight("-1px");
		l_tituloMp3.setValue("1. Seleccionar Archivo de Audio");
		verticalLayout_2.addComponent(l_tituloMp3);
		
		// vl_upload
		vl_upload = buildVl_upload();
		verticalLayout_2.addComponent(vl_upload);
		verticalLayout_2.setComponentAlignment(vl_upload, new Alignment(20));
		
		// l_tituloDatosAudio
		l_tituloDatosAudio = new Label();
		l_tituloDatosAudio.setImmediate(false);
		l_tituloDatosAudio.setWidth("-1px");
		l_tituloDatosAudio.setHeight("-1px");
		l_tituloDatosAudio.setValue("2. Datos del Audio");
		verticalLayout_2.addComponent(l_tituloDatosAudio);
		
		// horizontalLayout_2
		horizontalLayout_2 = buildHorizontalLayout_2();
		verticalLayout_2.addComponent(horizontalLayout_2);
		
		// l_licencias
		l_licencias = new Label();
		l_licencias.setImmediate(false);
		l_licencias.setWidth("-1px");
		l_licencias.setHeight("-1px");
		l_licencias.setValue("3. Licencias de Contenido");
		verticalLayout_2.addComponent(l_licencias);
		
		// og_licencia
		og_licencia = new OptionGroup();
		og_licencia.setImmediate(true);
		og_licencia.setWidth("-1px");
		og_licencia.setHeight("40px");
		verticalLayout_2.addComponent(og_licencia);
		
		// p_cc
		p_cc = buildP_cc();
		verticalLayout_2.addComponent(p_cc);
		
		return verticalLayout_2;
	}

	@AutoGenerated
	private VerticalLayout buildVl_upload() {
		// common part: create layout
		vl_upload = new VerticalLayout();
		vl_upload.setImmediate(false);
		vl_upload.setWidth("500px");
		vl_upload.setHeight("-1px");
		vl_upload.setMargin(false);
		vl_upload.setSpacing(true);
		
		// upload_1
		upload_1 = new Upload();
		upload_1.setImmediate(false);
		upload_1.setWidth("-1px");
		upload_1.setHeight("-1px");
		vl_upload.addComponent(upload_1);
		vl_upload.setComponentAlignment(upload_1, new Alignment(20));
		
		// l_audio
		l_audio = new Label();
		l_audio.setImmediate(false);
		l_audio.setWidth("-1px");
		l_audio.setHeight("-1px");
		l_audio.setValue("Nombre Audio");
		vl_upload.addComponent(l_audio);
		vl_upload.setComponentAlignment(l_audio, new Alignment(20));
		
		return vl_upload;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_2() {
		// common part: create layout
		horizontalLayout_2 = new HorizontalLayout();
		horizontalLayout_2.setImmediate(false);
		horizontalLayout_2.setWidth("-1px");
		horizontalLayout_2.setHeight("-1px");
		horizontalLayout_2.setMargin(false);
		horizontalLayout_2.setSpacing(true);
		
		// vl_imagen
		vl_imagen = buildVl_imagen();
		horizontalLayout_2.addComponent(vl_imagen);
		
		// gridLayout_2
		gridLayout_2 = buildGridLayout_2();
		horizontalLayout_2.addComponent(gridLayout_2);
		
		return horizontalLayout_2;
	}

	@AutoGenerated
	private VerticalLayout buildVl_imagen() {
		// common part: create layout
		vl_imagen = new VerticalLayout();
		vl_imagen.setImmediate(false);
		vl_imagen.setWidth("-1px");
		vl_imagen.setHeight("-1px");
		vl_imagen.setMargin(false);
		vl_imagen.setSpacing(true);
		
		// embedded_1
		embedded_1 = new Embedded();
		embedded_1.setImmediate(false);
		embedded_1.setWidth("320px");
		embedded_1.setHeight("300px");
		embedded_1.setSource(new ThemeResource("img/component/embedded_icon.png"));
		embedded_1.setType(1);
		embedded_1.setMimeType("image/png");
		vl_imagen.addComponent(embedded_1);
		
		// upload_imagen
		upload_imagen = new Upload();
		upload_imagen.setImmediate(false);
		upload_imagen.setWidth("-1px");
		upload_imagen.setHeight("-1px");
		vl_imagen.addComponent(upload_imagen);
		vl_imagen.setComponentAlignment(upload_imagen, new Alignment(48));
		
		return vl_imagen;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_2() {
		// common part: create layout
		gridLayout_2 = new GridLayout();
		gridLayout_2.setImmediate(false);
		gridLayout_2.setWidth("-1px");
		gridLayout_2.setHeight("-1px");
		gridLayout_2.setMargin(false);
		gridLayout_2.setSpacing(true);
		gridLayout_2.setColumns(3);
		gridLayout_2.setRows(9);
		
		// label_1
		label_1 = new Label();
		label_1.setImmediate(false);
		label_1.setWidth("-1px");
		label_1.setHeight("-1px");
		label_1.setValue("Titulo del Audio");
		gridLayout_2.addComponent(label_1, 0, 0);
		
		// tf_tituloAudio
		tf_tituloAudio = new TextField();
		tf_tituloAudio.setImmediate(true);
		tf_tituloAudio.setWidth("350px");
		tf_tituloAudio.setHeight("-1px");
		gridLayout_2.addComponent(tf_tituloAudio, 1, 0);
		
		// label_2
		label_2 = new Label();
		label_2.setImmediate(false);
		label_2.setWidth("-1px");
		label_2.setHeight("-1px");
		label_2.setValue("Descripción / Resumen");
		gridLayout_2.addComponent(label_2, 0, 1);
		
		// ta_descripcion
		ta_descripcion = new TextArea();
		ta_descripcion.setImmediate(true);
		ta_descripcion.setWidth("100.0%");
		ta_descripcion.setHeight("-1px");
		gridLayout_2.addComponent(ta_descripcion, 1, 1);
		
		// label_11
		label_11 = new Label();
		label_11.setImmediate(false);
		label_11.setWidth("-1px");
		label_11.setHeight("-1px");
		label_11.setValue("Fecha de Publicación");
		gridLayout_2.addComponent(label_11, 0, 2);
		
		// df_fechaCreacion
		df_fechaCreacion = new PopupDateField();
		df_fechaCreacion.setImmediate(false);
		df_fechaCreacion.setWidth("250px");
		df_fechaCreacion.setHeight("-1px");
		gridLayout_2.addComponent(df_fechaCreacion, 1, 2);
		
		// label_3
		label_3 = new Label();
		label_3.setImmediate(false);
		label_3.setWidth("-1px");
		label_3.setHeight("-1px");
		label_3.setValue("Estado");
		gridLayout_2.addComponent(label_3, 0, 3);
		
		// cb_estado
		cb_estado = new ComboBox();
		cb_estado.setImmediate(true);
		cb_estado.setWidth("250px");
		cb_estado.setHeight("-1px");
		gridLayout_2.addComponent(cb_estado, 1, 3);
		
		// label_5
		label_5 = new Label();
		label_5.setImmediate(false);
		label_5.setWidth("-1px");
		label_5.setHeight("-1px");
		label_5.setValue("Genero");
		gridLayout_2.addComponent(label_5, 0, 4);
		
		// cb_genero
		cb_genero = new ComboBox();
		cb_genero.setImmediate(true);
		cb_genero.setWidth("250px");
		cb_genero.setHeight("-1px");
		gridLayout_2.addComponent(cb_genero, 1, 4);
		
		// label_4
		label_4 = new Label();
		label_4.setImmediate(false);
		label_4.setWidth("-1px");
		label_4.setHeight("-1px");
		label_4.setValue("Idioma");
		gridLayout_2.addComponent(label_4, 0, 5);
		
		// cb_idioma
		cb_idioma = new ComboBox();
		cb_idioma.setImmediate(true);
		cb_idioma.setWidth("250px");
		cb_idioma.setHeight("-1px");
		gridLayout_2.addComponent(cb_idioma, 1, 5);
		
		// label_7
		label_7 = new Label();
		label_7.setImmediate(false);
		label_7.setWidth("-1px");
		label_7.setHeight("-1px");
		label_7.setValue("Mis Listas");
		gridLayout_2.addComponent(label_7, 0, 6);
		
		// tf_listasDifusion
		tf_listasDifusion = new TextField();
		tf_listasDifusion.setImmediate(false);
		tf_listasDifusion.setWidth("100.0%");
		tf_listasDifusion.setHeight("-1px");
		gridLayout_2.addComponent(tf_listasDifusion, 1, 6);
		
		// b_addListas
		b_addListas = new Button();
		b_addListas.setCaption(" ");
		b_addListas.setImmediate(true);
		b_addListas.setWidth("-1px");
		b_addListas.setHeight("-1px");
		gridLayout_2.addComponent(b_addListas, 2, 6);
		
		// label_8
		label_8 = new Label();
		label_8.setImmediate(false);
		label_8.setWidth("-1px");
		label_8.setHeight("-1px");
		label_8.setValue("Etiquetas");
		gridLayout_2.addComponent(label_8, 0, 7);
		
		// label_6
		label_6 = new Label();
		label_6.setImmediate(false);
		label_6.setWidth("-1px");
		label_6.setHeight("-1px");
		label_6.setValue("Categorias");
		gridLayout_2.addComponent(label_6, 0, 8);
		
		// tf_categorias
		tf_categorias = new TextField();
		tf_categorias.setImmediate(false);
		tf_categorias.setWidth("100.0%");
		tf_categorias.setHeight("-1px");
		gridLayout_2.addComponent(tf_categorias, 1, 8);
		
		// b_addCategoria
		b_addCategoria = new Button();
		b_addCategoria.setCaption(" ");
		b_addCategoria.setImmediate(true);
		b_addCategoria.setWidth("-1px");
		b_addCategoria.setHeight("-1px");
		gridLayout_2.addComponent(b_addCategoria, 2, 8);
		
		return gridLayout_2;
	}

	@AutoGenerated
	private Panel buildP_cc() {
		// common part: create layout
		p_cc = new Panel();
		p_cc.setCaption("Creative Commons");
		p_cc.setImmediate(false);
		p_cc.setWidth("100.0%");
		p_cc.setHeight("-1px");
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		p_cc.setContent(horizontalLayout_1);
		
		return p_cc;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("100.0%");
		horizontalLayout_1.setHeight("-1px");
		horizontalLayout_1.setMargin(false);
		
		// gridLayout_1
		gridLayout_1 = buildGridLayout_1();
		horizontalLayout_1.addComponent(gridLayout_1);
		
		return horizontalLayout_1;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_1() {
		// common part: create layout
		gridLayout_1 = new GridLayout();
		gridLayout_1.setImmediate(false);
		gridLayout_1.setWidth("100.0%");
		gridLayout_1.setHeight("-1px");
		gridLayout_1.setMargin(true);
		gridLayout_1.setColumns(4);
		gridLayout_1.setRows(2);
		
		// chk_Attribution
		chk_Attribution = new CheckBox();
		chk_Attribution.setCaption("Atribución");
		chk_Attribution.setImmediate(true);
		chk_Attribution.setWidth("-1px");
		chk_Attribution.setHeight("-1px");
		gridLayout_1.addComponent(chk_Attribution, 0, 0);
		
		// chk_noComercial
		chk_noComercial = new CheckBox();
		chk_noComercial.setCaption("No Comercial");
		chk_noComercial.setImmediate(true);
		chk_noComercial.setWidth("-1px");
		chk_noComercial.setHeight("-1px");
		gridLayout_1.addComponent(chk_noComercial, 1, 0);
		
		// chk_compartirIgual
		chk_compartirIgual = new CheckBox();
		chk_compartirIgual.setCaption("Compartir Igual ");
		chk_compartirIgual.setImmediate(true);
		chk_compartirIgual.setWidth("-1px");
		chk_compartirIgual.setHeight("-1px");
		gridLayout_1.addComponent(chk_compartirIgual, 2, 0);
		
		// chk_sinDerivadas
		chk_sinDerivadas = new CheckBox();
		chk_sinDerivadas.setCaption("Sin Derivadas");
		chk_sinDerivadas.setImmediate(true);
		chk_sinDerivadas.setWidth("-1px");
		chk_sinDerivadas.setHeight("-1px");
		gridLayout_1.addComponent(chk_sinDerivadas, 3, 0);
		
		return gridLayout_1;
	}

}
