package com.ud.audiolearning.micontenido.ui;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.text.SimpleDateFormat;

import org.springframework.beans.factory.annotation.Autowired;
import org.vaadin.dialogs.ConfirmDialog;
import org.vaadin.teemu.VaadinIcons;
import com.ud.audiolearning.api.anotaciones.UIComponent;
import com.ud.audiolearning.api.interfaces.AudioLearnUI;
import com.ud.audiolearning.api.domain.Audio;
import com.ud.audiolearning.api.ui.LayoutCellDescripcion;
import com.ud.audiolearning.micontenido.service.MiContenidoService;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.StreamResource;
import com.vaadin.server.ThemeResource;
import com.vaadin.server.StreamResource.StreamSource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.ValoTheme;

import ru.xpoft.vaadin.VaadinView;

@SuppressWarnings("serial")
@UIComponent
@VaadinView("misAudios")
public class MisAudios extends CustomComponent implements View {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Table t_Audios;
	@AutoGenerated
	private HorizontalLayout hl_cabecera;
	@AutoGenerated
	private GridLayout gridLayout_1;
	@AutoGenerated
	private ComboBox comboBox_1;
	@AutoGenerated
	private Button b_addAudio;
	@AutoGenerated
	private Label l_titulo;
	private BeanItemContainer<Audio> BICAudios;

	@Autowired
	MiContenidoService miContenidoService;

	SimpleDateFormat dateFormat = new SimpleDateFormat("YYYY-MM-dd hh:mm");

	public MisAudios() {
	}

	@Override
	public void enter(ViewChangeEvent event) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		init();
		style();

	}

	public void init() {

		b_addAudio.addClickListener(e -> addAudio(e));
		BICAudios = new BeanItemContainer<Audio>(Audio.class);
		t_Audios.setContainerDataSource(BICAudios);
		t_Audios.addGeneratedColumn("Imagen", this::construirImagen);
		t_Audios.addGeneratedColumn("Descripcion", this::construirDescripcion);
		t_Audios.addGeneratedColumn("Admin", this::construirAdmin);

		t_Audios.setVisibleColumns("Imagen", "Descripcion", "Admin");
		t_Audios.setColumnWidth("Imagen", 110);
		t_Audios.setColumnWidth("Descripcion", 500);
		// t_Audios.setColumnWidth("Admin", 170);

		AudioLearnUI ui = (AudioLearnUI) UI.getCurrent();
		ui.getPrivateUI().getAreaContenido().setHeight("100%");
		llenar(null);

	}

	public void llenar(String string) {

		BICAudios.removeAllItems();
		BICAudios.addAll(miContenidoService.consultarAudiosUsuario());

	}

	

	public void style() {

		l_titulo.addStyleName(ValoTheme.LABEL_COLORED);
		l_titulo.addStyleName(ValoTheme.LABEL_H2);
		l_titulo.addStyleName(ValoTheme.LABEL_BOLD);
		b_addAudio.setIcon(VaadinIcons.PLUS);
		b_addAudio.addStyleName(ValoTheme.BUTTON_PRIMARY);
		t_Audios.addStyleName(ValoTheme.TABLE_NO_HEADER);
		t_Audios.addStyleName(ValoTheme.TABLE_NO_VERTICAL_LINES);
		t_Audios.addStyleName(ValoTheme.TABLE_BORDERLESS);
	}

	private void addAudio(ClickEvent e) {
		AudioLearnUI audioLearning = (AudioLearnUI) UI.getCurrent();
		audioLearning.getNavigator().navigateTo("CargarAudio");
	}

	private Object construirImagen(Table source, Object itemId, Object columnId) {

		Audio audio = (Audio) itemId;
		Embedded embedded = new Embedded();
		embedded.setWidth("72px");
		embedded.setHeight("72px");

		if (audio.getImagen().getBinaryData() != null) {

			embedded.setSource(new StreamResource(new StreamSource() {

				@Override
				public InputStream getStream() {

					return new ByteArrayInputStream(audio.getImagen().getBinaryData().getData());
				}
			}, audio.getImagen().getNombre()));
		} else {

			embedded.setSource(new ThemeResource("img/component/embedded_icon.png"));
		}

		VerticalLayout vl = new VerticalLayout();
		Label estado = new Label();
		if (audio.getEstado().equals("A")) {
			estado.setValue("Activo");
			estado.setStyleName("labelActivo");
		} else if (audio.getEstado().equals("I")) {
			estado.setValue("Inactivo");
			estado.setStyleName("labelInactivo");
		}
		estado.setWidth("-1px");
		vl.addComponents(embedded);
		vl.setComponentAlignment(embedded, Alignment.MIDDLE_CENTER);
		// vl.setComponentAlignment(estado, Alignment.MIDDLE_CENTER);
		vl.setWidth("100%");
		vl.setSpacing(false);
		return vl;
	}

	private Object construirDescripcion(Table source, Object itemId, Object columnId) {
		Audio audio = (Audio) itemId;
		return new LayoutCellDescripcion(audio.getTitulo(), audio.getDescripcion(), audio.getFechaCreacion(),
				audio.getEstado());
	}

	private Object construirAdmin(Table source, Object itemId, Object columnId) {
		Audio audio = (Audio) itemId;
		VerticalLayout vl = new VerticalLayout();
		HorizontalLayout hl = new HorizontalLayout();
		Button reproducir = new Button("Escuchar");
		reproducir.addStyleName("buttonPlay");
		reproducir.addStyleName(ValoTheme.BUTTON_ICON_ALIGN_TOP);
		reproducir.setIcon(VaadinIcons.PLAY);
		reproducir.addStyleName(ValoTheme.BUTTON_BORDERLESS_COLORED);
		reproducir.addClickListener(e -> reproducirAudio(audio));
		Button editar = new Button("Editar Audio");
		editar.addStyleName("buttonEdit");
		editar.addClickListener(e -> editarAudio(audio));
		editar.setIcon(VaadinIcons.EDIT);
		editar.addStyleName(ValoTheme.BUTTON_BORDERLESS_COLORED);
		editar.addStyleName(ValoTheme.BUTTON_ICON_ALIGN_TOP);
		Button eliminar = new Button("Eliminar Audio");
		eliminar.addStyleName("buttonRemove");
		eliminar.addClickListener(e -> eliminarAudio(audio));
		eliminar.setIcon(VaadinIcons.TRASH);
		eliminar.addStyleName(ValoTheme.BUTTON_BORDERLESS_COLORED);
		eliminar.addStyleName(ValoTheme.BUTTON_ICON_ALIGN_TOP);
		hl.addComponents(reproducir, editar, eliminar);

		hl.addStyleName("adminMisaudios");

		vl.setWidth("100%");
		vl.addComponent(hl);
		vl.setComponentAlignment(hl, Alignment.MIDDLE_CENTER);
		return vl;

	}

	private void eliminarAudio(Audio audio) {

		ConfirmDialog.show(UI.getCurrent(), "Eliminar Audio:",
				"Esta seguro que desea eliminar el Audio " + audio.getTitulo(), "Eliminar", "No",
				new ConfirmDialog.Listener() {

					public void onClose(ConfirmDialog dialog) {
						if (dialog.isConfirmed()) {
							miContenidoService.eliminarAudio(audio);
							llenar(null);
						} else {
						}
					}
				});
		
		
	}

	private void editarAudio(Audio audio) {

//		Window w = new Window("Editar Lista");
//		w.setContent(new ViewEditarAudio());
//		w.setModal(true);
//		w.center();
//		w.setWidth("500px");
//		w.setHeight("-1px");
//		UI.getCurrent().addWindow(w);
		
		AudioLearnUI audioLearning = (AudioLearnUI) UI.getCurrent();
		audioLearning.getNavigator().navigateTo("editarAudio/"+audio.getId());
	}

	private void reproducirAudio(Audio audio) {
		UI.getCurrent().getNavigator().navigateTo("reproductor/" + audio.getId());
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setStyleName("contenido");
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// hl_cabecera
		hl_cabecera = buildHl_cabecera();
		mainLayout.addComponent(hl_cabecera);

		// t_Audios
		t_Audios = new Table();
		t_Audios.setImmediate(false);
		t_Audios.setWidth("100.0%");
		t_Audios.setHeight("100.0%");
		mainLayout.addComponent(t_Audios);
		mainLayout.setExpandRatio(t_Audios, 1.0f);

		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHl_cabecera() {
		// common part: create layout
		hl_cabecera = new HorizontalLayout();
		hl_cabecera.setStyleName("cabeceraContenido");
		hl_cabecera.setImmediate(false);
		hl_cabecera.setWidth("100.0%");
		hl_cabecera.setHeight("-1px");
		hl_cabecera.setMargin(false);

		// l_titulo
		l_titulo = new Label();
		l_titulo.setImmediate(false);
		l_titulo.setWidth("-1px");
		l_titulo.setHeight("-1px");
		l_titulo.setValue("Mis Audios");
		hl_cabecera.addComponent(l_titulo);

		// gridLayout_1
		gridLayout_1 = buildGridLayout_1();
		hl_cabecera.addComponent(gridLayout_1);
		hl_cabecera.setComponentAlignment(gridLayout_1, new Alignment(6));

		return hl_cabecera;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_1() {
		// common part: create layout
		gridLayout_1 = new GridLayout();
		gridLayout_1.setImmediate(false);
		gridLayout_1.setWidth("-1px");
		gridLayout_1.setHeight("-1px");
		gridLayout_1.setMargin(false);
		gridLayout_1.setSpacing(true);
		gridLayout_1.setColumns(2);

		// b_addAudio
		b_addAudio = new Button();
		b_addAudio.setCaption("Agregar Audio");
		b_addAudio.setImmediate(true);
		b_addAudio.setWidth("-1px");
		b_addAudio.setHeight("-1px");
		gridLayout_1.addComponent(b_addAudio, 0, 0);

		// comboBox_1
		comboBox_1 = new ComboBox();
		comboBox_1.setImmediate(false);
		comboBox_1.setWidth("-1px");
		comboBox_1.setHeight("-1px");
		gridLayout_1.addComponent(comboBox_1, 1, 0);

		return gridLayout_1;
	}

}
