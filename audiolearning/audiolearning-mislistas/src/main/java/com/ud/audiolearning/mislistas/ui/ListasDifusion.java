package com.ud.audiolearning.mislistas.ui;

import java.text.SimpleDateFormat;

import org.springframework.beans.factory.annotation.Autowired;
import org.vaadin.dialogs.ConfirmDialog;
import org.vaadin.teemu.VaadinIcons;

import com.ud.audiolearning.api.anotaciones.UIComponent;
import com.ud.audiolearning.api.interfaces.AudioLearnUI;
import com.ud.audiolearning.api.domain.ListaDifusion;
import com.ud.audiolearning.api.ui.LayoutCellDescripcion;
import com.ud.audiolearning.mislistas.service.MisListasService;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.ExternalResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.ValoTheme;

import ru.xpoft.vaadin.VaadinView;

@SuppressWarnings("serial")
@UIComponent
@VaadinView("listasDifusion")
public class ListasDifusion extends CustomComponent implements View {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Table t_listasDifusion;
	@AutoGenerated
	private HorizontalLayout hl_cabecera;
	@AutoGenerated
	private GridLayout gridLayout_1;
	@AutoGenerated
	private ComboBox cb_filtro;
	@AutoGenerated
	private Button b_addLista;
	@AutoGenerated
	private Label l_titulo;
	@Autowired
	MisListasService misListasService;

	private BeanItemContainer<ListaDifusion> BICListaDifusion;

	SimpleDateFormat dateFormat = new SimpleDateFormat("YYYY-MM-dd hh:mm");

	public ListasDifusion() {
	}

	@Override
	public void enter(ViewChangeEvent event) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		init();
		style();
	}

	private void style() {
		l_titulo.addStyleName(ValoTheme.LABEL_COLORED);
		l_titulo.addStyleName(ValoTheme.LABEL_H2);
		l_titulo.addStyleName(ValoTheme.LABEL_BOLD);
		b_addLista.setIcon(VaadinIcons.PLUS);
		b_addLista.addStyleName(ValoTheme.BUTTON_PRIMARY);
		t_listasDifusion.addStyleName(ValoTheme.TABLE_NO_HEADER);
		t_listasDifusion.addStyleName(ValoTheme.TABLE_NO_VERTICAL_LINES);
		t_listasDifusion.addStyleName(ValoTheme.TABLE_BORDERLESS);
	}

	private void init() {
		b_addLista.addClickListener(e -> addListaDifusion(e));
		BICListaDifusion = new BeanItemContainer<ListaDifusion>(ListaDifusion.class);
		t_listasDifusion.setContainerDataSource(BICListaDifusion);
		t_listasDifusion.addGeneratedColumn("Imagen", this::construirImagen);
		t_listasDifusion.addGeneratedColumn("Descripcion", this::construirDescripcion);
		t_listasDifusion.addGeneratedColumn("Audios", this::construirAudios);
		t_listasDifusion.addGeneratedColumn("Admin", this::construirAdmin);
		t_listasDifusion.setVisibleColumns("Imagen", "Descripcion", "Audios", "Admin");
		t_listasDifusion.setColumnWidth("Imagen", 110);
		t_listasDifusion.setColumnWidth("Descripcion", 500);
		//t_listasDifusion.setColumnWidth("Admin", 170);

		AudioLearnUI ui = (AudioLearnUI) UI.getCurrent();
		ui.getPrivateUI().getAreaContenido().setHeight("100%");
		llenar(null);
	}

	private void llenar(String string) {

		BICListaDifusion.removeAllItems();
		BICListaDifusion.addAll(misListasService.findAllListasDifusion());

	}

	private Object construirImagen(Table source, Object itemId, Object columnId) {
		//ListaDifusion lista = (ListaDifusion) itemId;
		Embedded embedded = new Embedded();
//		embedded.setSource(new ExternalResource(
//				"http://icons.iconarchive.com/icons/gianni-polito/colobrush/72/folder-green-music-icon.png"));
		embedded.setSource(new ExternalResource(
				"http://icons.iconarchive.com/icons/webalys/kameleon.pics/72/Database-Cloud-icon.png"));
		VerticalLayout vl = new VerticalLayout();
		
	
		vl.addComponents(embedded);
		vl.setComponentAlignment(embedded, Alignment.MIDDLE_CENTER);
		vl.setWidth("100%");
		return vl;
	}

	private Object construirDescripcion(Table source, Object itemId, Object columnId) {
		ListaDifusion lista = (ListaDifusion) itemId;
		return new LayoutCellDescripcion(lista.getTitulo(), lista.getDescripcion(), lista.getFechaCreacion(),
				lista.getEstado());
	}

	private Object construirAudios(Table source, Object itemId, Object columnId) {
		ListaDifusion lista = (ListaDifusion) itemId;
		VerticalLayout vl = new VerticalLayout();
		Label numAdios = new Label("" + lista.getAudios().size());
		Label audios = new Label("Audios");
		numAdios.setWidth("-1px");
		audios.setWidth("-1px");
		numAdios.addStyleName(ValoTheme.LABEL_COLORED);
		numAdios.addStyleName("labelSizeAudios");
		numAdios.addStyleName(ValoTheme.LABEL_BOLD);
		audios.addStyleName(ValoTheme.LABEL_COLORED);
		audios.addStyleName(ValoTheme.LABEL_H3);
		audios.addStyleName(ValoTheme.LABEL_BOLD);
		vl.addComponents(numAdios, audios);
		vl.setComponentAlignment(numAdios, Alignment.MIDDLE_CENTER);
		vl.setComponentAlignment(audios, Alignment.MIDDLE_CENTER);

		return vl;
	}

	private Object construirAdmin(Table source, Object itemId, Object columnId) {
		ListaDifusion lista = (ListaDifusion) itemId;
		VerticalLayout vl = new VerticalLayout();
		HorizontalLayout hl = new HorizontalLayout();
		Button editar = new Button("Editar Lista");
		editar.addStyleName("buttonEdit");
		editar.addClickListener(e -> editarLista(lista));
		editar.setIcon(VaadinIcons.EDIT);
		editar.addStyleName(ValoTheme.BUTTON_BORDERLESS_COLORED);
		editar.addStyleName(ValoTheme.BUTTON_ICON_ALIGN_TOP);
		Button eliminar = new Button("Eliminar Lista");
		eliminar.addStyleName("buttonRemove");
		eliminar.addClickListener(e -> eliminarLista(lista));
		eliminar.setIcon(VaadinIcons.TRASH);
		eliminar.addStyleName(ValoTheme.BUTTON_BORDERLESS_COLORED);
		eliminar.addStyleName(ValoTheme.BUTTON_ICON_ALIGN_TOP);
		Button add = new Button("Agregar Audio");
		add.setStyleName("buttonPlay");
		add.addClickListener(e -> addAudioLista(lista));
		add.setIcon(VaadinIcons.PLUS_CIRCLE);
		add.addStyleName(ValoTheme.BUTTON_BORDERLESS_COLORED);
		add.addStyleName(ValoTheme.BUTTON_ICON_ALIGN_TOP);
		hl.setStyleName("adminMisaudios");
		hl.addComponents(add, editar, eliminar);
		vl.setWidth("100%");
		vl.addComponent(hl);
		vl.setComponentAlignment(hl, Alignment.MIDDLE_CENTER);
		return vl;
	}

	private void addAudioLista(ListaDifusion lista) {
		Window w = new Window("Editar Lista");
		w.setContent(new ViewAddAudio());
		w.setModal(true);
		w.center();
		w.setWidth("-1px");
		w.setHeight("-1px");
		UI.getCurrent().addWindow(w);
	}

	private void eliminarLista(ListaDifusion lista) {

		ConfirmDialog.show(UI.getCurrent(), "Eliminar Lista de Difusion:",
				"Esta seguro que desea eliminar la lista de reproduccion " + lista.getTitulo(), "Estoy Seguro", "No",
				new ConfirmDialog.Listener() {

					public void onClose(ConfirmDialog dialog) {
						if (dialog.isConfirmed()) {
							misListasService.eliminarListaDifusion(lista);
							llenar(null);
						} else {
						}
					}
				});
	}

	private void editarLista(ListaDifusion listaReproduccion) {
		Window w = new Window("Editar Lista");
		w.setContent(new ViewInfoLista(listaReproduccion, "U", misListasService, this::llenar));
		w.setModal(true);
		w.center();
		w.setWidth("500px");
		w.setHeight("-1px");
		UI.getCurrent().addWindow(w);

	}

	private void addListaDifusion(ClickEvent e) {

		Window w = new Window("Crear Lista");
		w.setContent(new ViewInfoLista(new ListaDifusion(), "C", misListasService, this::llenar));
		w.setModal(true);
		w.center();
		w.setWidth("500px");
		w.setHeight("-1px");
		UI.getCurrent().addWindow(w);

	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setStyleName("contenido");
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// hl_cabecera
		hl_cabecera = buildHl_cabecera();
		mainLayout.addComponent(hl_cabecera);
		
		// t_listasDifusion
		t_listasDifusion = new Table();
		t_listasDifusion.setImmediate(false);
		t_listasDifusion.setWidth("100.0%");
		t_listasDifusion.setHeight("100.0%");
		mainLayout.addComponent(t_listasDifusion);
		mainLayout.setExpandRatio(t_listasDifusion, 1.0f);
		mainLayout.setComponentAlignment(t_listasDifusion, new Alignment(20));
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHl_cabecera() {
		// common part: create layout
		hl_cabecera = new HorizontalLayout();
		hl_cabecera.setStyleName("cabeceraContenido");
		hl_cabecera.setImmediate(false);
		hl_cabecera.setWidth("100.0%");
		hl_cabecera.setHeight("-1px");
		hl_cabecera.setMargin(false);
		hl_cabecera.setSpacing(true);
		
		// l_titulo
		l_titulo = new Label();
		l_titulo.setImmediate(false);
		l_titulo.setWidth("-1px");
		l_titulo.setHeight("-1px");
		l_titulo.setValue("Listas de Difusi√≥n");
		hl_cabecera.addComponent(l_titulo);
		
		// gridLayout_1
		gridLayout_1 = buildGridLayout_1();
		hl_cabecera.addComponent(gridLayout_1);
		hl_cabecera.setComponentAlignment(gridLayout_1, new Alignment(34));
		
		return hl_cabecera;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_1() {
		// common part: create layout
		gridLayout_1 = new GridLayout();
		gridLayout_1.setImmediate(false);
		gridLayout_1.setWidth("-1px");
		gridLayout_1.setHeight("-1px");
		gridLayout_1.setMargin(false);
		gridLayout_1.setSpacing(true);
		gridLayout_1.setColumns(2);
		
		// b_addLista
		b_addLista = new Button();
		b_addLista.setCaption("Agregar Lista");
		b_addLista.setImmediate(true);
		b_addLista.setWidth("-1px");
		b_addLista.setHeight("-1px");
		gridLayout_1.addComponent(b_addLista, 0, 0);
		
		// cb_filtro
		cb_filtro = new ComboBox();
		cb_filtro.setImmediate(false);
		cb_filtro.setWidth("-1px");
		cb_filtro.setHeight("-1px");
		gridLayout_1.addComponent(cb_filtro, 1, 0);
		
		return gridLayout_1;
	}

}
